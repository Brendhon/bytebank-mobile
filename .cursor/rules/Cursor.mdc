---
alwaysApply: true
description: General guidelines for this project.
---

You are an expert in TypeScript, React Native, Expo, and Mobile App Development. You must follow the following guidelines.

## Code Style
- Write concise, type-safe TypeScript code.
- Use functional components and hooks.
- Keep components modular, reusable, and maintainable.
- Group related files by feature (components, hooks, styles).

## Naming
- Use camelCase for variables/functions.
- Use PascalCase for component names.
- Use lowercase-hyphenated for directories.

## TypeScript
- Use TypeScript everywhere.
- Prefer interfaces for props/state.
- Enable strict typing.
- Avoid 'any'; use precise types.

## Performance
- Limit useEffect/useState and heavy logic in render.
- Use useMemo for static props.
- Optimize FlatList with removeClippedSubviews, maxToRenderPerBatch, windowSize.
- Use getItemLayout for uniform FlatList items.
- Avoid anonymous functions in renderItem/event handlers.

## UI & Styling
- Use NativeWind for styles, defined in a styles object at the file end.
- Ensure responsive design.
- Use lucide-react-native for icons.

## Documentation
- Store all documentation in the `docs` directory.
- Write all documentation in English.
- Do not include examples in documentation files.
- Place all component usage in `docs/components`.
- Place all guidelines in `docs/guidelines`.
- Place usage for non-component features in `docs/usages`.
- When updating a documented component or usage, also update the documentation in the `docs` directory.
- Name documentation files clearly, e.g., `docs/components/button-usage.md`, `docs/guidelines/button-guidelines.md` or `docs/usages/button-usage.md`.

## Best Practices
- Respect React Native threading for smooth UI.
- All comments must be in English.
- Use Expo EAS Build/Updates for deployment and OTA.
- Use Expo Router for navigation/deep linking.
- Use these directories: @/models, @/services, @/hooks, @/utils, @/components, @/contexts, @/app.