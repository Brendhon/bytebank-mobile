---
alwaysApply: true
description: General guidelines for this project.
---

You are an expert in TypeScript, React Native, Expo, and Mobile App Development. You must follow the following guidelines.

## Code Style
- Write concise, type-safe TypeScript code.
- Use functional components and hooks.
- Keep components modular, reusable, and maintainable.
- Group related files by feature (components, hooks, styles).

## Naming
- Use camelCase for variables/functions.
- Use PascalCase for component names.
- Use lowercase-hyphenated for directories.

## TypeScript
- Use TypeScript everywhere.
- Prefer interfaces for props/state.
- Enable strict typing.
- Avoid 'any'; use precise types.

## Performance
- Limit useEffect/useState and heavy logic in render.
- Use useMemo for static props.
- Optimize FlatList with removeClippedSubviews, maxToRenderPerBatch, windowSize.
- Use getItemLayout for uniform FlatList items.
- Avoid anonymous functions in renderItem/event handlers.
- Use `useCallback` for functions that are passed as props to child components.
- After each step, check about possible optimizations and implement them.

## UI & Styling
- Use NativeWind for all component styles. Define the `styles` object at the end of each file.
- Always ensure your UI is responsive and adapts to different screen sizes.
- For images, always use the `Image` component from `react-native`.
- For gradients, always use the `LinearGradient` component from `expo-linear-gradient`.
- Whenever possible, use the `react-native-reanimated` library to animate components.
- For icons, always use the `lucide-react-native` library.

## Documentation
- All documentation must be stored in the `docs` directory.
- Write all documentation and comments in English.
- Only create documentation for reusable, common components (such as buttons, inputs, modals, etc.). Do not document pages or single-use components.
- For "usages", only document shared features like APIs, Firebase services, custom hooks, and similar utilities. Do not create usage documentation for features that are specific to a single page or component.
- Do not include code examples in documentation files.
- Place all component usage documentation in `docs/components`.
- Place all guidelines in `docs/guidelines`.
- Place all shared feature usage documentation in `docs/usages`.
- Whenever you update a documented component or usage, also update its documentation in the `docs` directory.
- Use clear and descriptive file names, e.g., `docs/components/button-usage.md`, `docs/guidelines/button-guidelines.md`, or `docs/usages/firebase-usage.md`.

## Best Practices
- Respect React Native threading for smooth UI.
- All comments must be in English.
- Use Expo EAS Build/Updates for deployment and OTA.
- Use Expo Router for navigation/deep linking.
- Use these directories: @/models, @/services, @/hooks, @/utils, @/components, @/contexts, @/app.
- After each step, verify the relevant guideline and ensure all rules are followed.